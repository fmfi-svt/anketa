{% extends 'AnketaBundle::layout.html.twig' %}

{% block title %}{{ title|default("") }}{% endblock %}
{% block navigation %}
    {{ menu.statistics.render(activeMenuItems)|raw }}
{% endblock %}
{% block content %}
    <style>
      rect.bordered {
        stroke: #E6E6E6;
        stroke-width:2px;   
      }

      text.mono {
        font-size: 9pt;
        font-family: Consolas, courier;
        fill: #aaa;
      }

      text.axis-workweek {
        fill: #000;
      }

      text.axis-worktime {
        fill: #000;
      }

      #chart {
	width: 960px;
	height: 420px;
	background-color: white;
        border-radius: 1em;
      }
    </style>
    <script src="//cdnjs.cloudflare.com/ajax/libs/d3/3.4.2/d3.min.js"></script>
    <h2>V ktory den/hodinu zacali studenti vyplnat anketu?</h2>
    <div id="chart"></div>
<script type="text/javascript">
      var margin = { top: 20, right: 40, bottom: 60, left: 100 },
          width = 960 - margin.left - margin.right,
          height = 430 - margin.top - margin.bottom,
          gridSize = Math.floor(width / 24),
          legendElementWidth = gridSize*2,
          buckets = 9,
          colors = ["#ffffd9","#edf8b1","#c7e9b4","#7fcdbb","#41b6c4","#1d91c0","#225ea8","#253494","#081d58"], // alternatively colorbrewer.YlGnBu[9]
          days = ["Mo", "Tu", "We", "Th", "Fr", "Sa", "Su"],
          times = ["1a", "2a", "3a", "4a", "5a", "6a", "7a", "8a", "9a", "10a", "11a", "12a", "1p", "2p", "3p", "4p", "5p", "6p", "7p", "8p", "9p", "10p", "11p", "12p"];


      d3.csv("{{ path('statistics_stats_started_weekday_hour', {'season_slug': season_slug}) }}",
        function(d) {
          return {
            day: +d.weekday,
            hour: +d.hour + 1,
            value: +d.counts
          };
        },
        function(error, data) {
          var colorScale = d3.scale.quantile()
              .domain([0, buckets - 1, d3.max(data, function (d) { return d.value; })])
              .range(colors);

          var svg = d3.select("#chart").append("svg")
              .attr("width", width + margin.left + margin.right)
              .attr("height", height + margin.top + margin.bottom)
              .append("g")
              .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

          var dayLabels = svg.selectAll(".dayLabel")
              .data(days)
              .enter().append("text")
                .text(function (d) { return d; })
                .attr("x", 0)
                .attr("y", function (d, i) { return i * gridSize; })
                .style("text-anchor", "end")
                .attr("transform", "translate(-6," + gridSize / 1.5 + ")")
                .attr("class", function (d, i) { return ((i >= 0 && i <= 4) ? "dayLabel mono axis axis-workweek" : "dayLabel mono axis"); });

          var timeLabels = svg.selectAll(".timeLabel")
              .data(times)
              .enter().append("text")
                .text(function(d) { return d; })
                .attr("x", function(d, i) { return i * gridSize; })
                .attr("y", 0)
                .style("text-anchor", "middle")
                .attr("transform", "translate(" + gridSize / 2 + ", -6)")
                .attr("class", function(d, i) { return ((i >= 7 && i <= 16) ? "timeLabel mono axis axis-worktime" : "timeLabel mono axis"); });

          var heatMap = svg.selectAll(".hour")
              .data(data)
              .enter().append("rect")
              .attr("x", function(d) { return (d.hour - 1) * gridSize; })
              .attr("y", function(d) { return (d.day - 1) * gridSize; })
              .attr("rx", 4)
              .attr("ry", 4)
              .attr("class", "hour bordered")
              .attr("width", gridSize)
              .attr("height", gridSize)
              .style("fill", colors[0]);

          heatMap.transition().duration(1000)
              .style("fill", function(d) { return colorScale(d.value); });

          heatMap.append("title").text(function(d) { return d.value; });
              
          var legend = svg.selectAll(".legend")
              .data([0].concat(colorScale.quantiles()), function(d) { return d; })
              .enter().append("g")
              .attr("class", "legend");

          legend.append("rect")
            .attr("x", function(d, i) { return legendElementWidth * i; })
            .attr("y", height - margin.bottom)
            .attr("width", legendElementWidth)
            .attr("height", gridSize / 2)
            .style("fill", function(d, i) { return colors[i]; });

          legend.append("text")
            .attr("class", "mono")
            .text(function(d) { return "â‰¥ " + Math.round(d); })
            .attr("x", function(d, i) { return legendElementWidth * i; })
            .attr("y", height + gridSize - margin.bottom);
      });
    </script>

    <h2> Kedy zacali studenti vyplnat anketu? </h2>
	<style>
		/* tell the SVG path to be a thin blue line without any area fill */
		path {
			stroke: steelblue;
			stroke-width: 1;
			fill: none;
		}
		
		.axis {
		  shape-rendering: crispEdges;
		}

		.x.axis line {
		  stroke: lightgrey;
		}

		.x.axis .minor {
		  stroke-opacity: .5;
		}

		.x.axis path {
		  display: none;
		}

		.y.axis line, .y.axis path {
		  fill: none;
		  stroke: #000;
		}
		#graph, #graph-finish {
		  background-color: white;
		  width: 960px;
		  border-radius: 1em;
		}
	</style>
	<div id="graph"></div>
	<script>
var m = {top: 50, right: 80, bottom: 80, left: 80},
    width = 960 - m.left - m.right,
    height = 500 - m.top - m.bottom;		

var parse = d3.time.format("%Y-%m-%d").parse;

var x = d3.time.scale().range([0, width]),
    y = d3.scale.linear().range([height, 0]),
    xAxis = d3.svg.axis().scale(x).tickSize(-height).tickSubdivide(true),
    yAxis = d3.svg.axis().scale(y).ticks(4).orient("right");

var line = d3.svg.line()
    .interpolate("monotone")
    .x(function(d) { return x(d.date); })
    .y(function(d) { return y(d.count); });

d3.csv("{{ path('statistics_stats_started_daily', {'season_slug': season_slug}) }}", 
	function(d){
		return {
			date: parse(d.dates),
			count: +d.counts
		};		
	},
	function(err, data) {
		x.domain([data[0].date, data[data.length - 1].date]);
		y.domain([0, d3.max(data, function(d) { return d.count; })]).nice();

		var svg = d3.select("#graph").append("svg")
		      .attr("width", width + m.left + m.right)
      		      .attr("height", height + m.top + m.bottom)
		      .on("click", function(){click()})
		    .append("g")
		      .attr("transform", "translate(" + m.left + "," + m.top + ")");

		svg.append("g")
		    .attr("class", "x axis")
		    .attr("transform", "translate(0," + height + ")")
		    .call(xAxis);

		// Add the y-axis.
		svg.append("g")
		    .attr("class", "y axis")
		    .attr("transform", "translate(" + width + ",0)")
		    .call(yAxis);
		
		svg.append("path")
		    .attr("class", "line")
		    .attr("clip-path", "url(#clip)")
		    .attr("d", line(data));

  function click() {
    console.log('clicking');
    var n = data.length - 1,
        i = Math.floor(Math.random() * n / 2),
        j = i + Math.floor(Math.random() * n / 2) + 1;
    x.domain([data[i].date, data[j].date]);
    var t = svg.transition().duration(750);
    t.select(".x.axis").call(xAxis);
    t.select(".line").attr("d", line(data));
  }

});
d3.csv("{{ path('statistics_stats_finished_daily', {'season_slug': season_slug}) }}", 
	function(d){
		return {
			date: parse(d.dates),
			count: +d.counts
		};		
	},
	function(err, data) {
		x.domain([data[0].date, data[data.length - 1].date]);
		y.domain([0, d3.max(data, function(d) { return d.count; })]).nice();

		var svg = d3.select("#graph-finish").append("svg")
		      .attr("width", width + m.left + m.right)
      		      .attr("height", height + m.top + m.bottom)
		      .on("click", function(){click()})
		    .append("g")
		      .attr("transform", "translate(" + m.left + "," + m.top + ")");

		svg.append("g")
		    .attr("class", "x axis")
		    .attr("transform", "translate(0," + height + ")")
		    .call(xAxis);

		// Add the y-axis.
		svg.append("g")
		    .attr("class", "y axis")
		    .attr("transform", "translate(" + width + ",0)")
		    .call(yAxis);
		
		svg.append("path")
		    .attr("class", "line")
		    .attr("clip-path", "url(#clip)")
		    .attr("d", line(data));

  function click() {
    console.log('clicking');
    var n = data.length - 1,
        i = Math.floor(Math.random() * n / 2),
        j = i + Math.floor(Math.random() * n / 2) + 1;
    x.domain([data[i].date, data[j].date]);
    var t = svg.transition().duration(750);
    t.select(".x.axis").call(xAxis);
    t.select(".line").attr("d", line(data));
  }

	});
	</script>
	
    	<h2> Kedy studenti skoncili s vyplnanim ankety? </h2>
	<div id="graph-finish"></div>
    	<h2> Ako dlho studentom trvalo vyplnit anketu? </h2>
    <script src="{{ asset('bundles/anketa/js/reports.js') }}" type="text/javascript"></script>
{% endblock %}

